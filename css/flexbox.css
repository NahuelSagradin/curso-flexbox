.headerPrincipal .container {
    display: flex; /*flex me permite colocar los elementos uno al lado del otro siempre que se utilice una etiqueta padre con dichos elementos en su interior*/
    align-items: center; /*hace que los elementos dentro del elemento padre que está con flex se alineen verticalmente, por lo tanto, para que ellos se alineen en el centro podemos utilizar 'align-items: center;' */
    justify-content: space-between; /*me permite generar un espacio entre los elementos,es decir, hace que el espacio que queda en nuestro elemento padre se distribuya entre los hijos, con esta clase los elementos se situan a los laterales generando un espacio en medio, caso contrario tendriamos todo ese espacio del lado derecho. Por suerte ese no es el único valor de dicha propiedad: 
    - justify-content: flex-end; (pone todo el espacio a la izquierda, lanzando todo el contenido a la derecha)
    - justify-content: flex-start; (modelo padron/pone todo el espacio a la derecha, lanzando el contenido a la izquierda)
    - justify-content: center; (pone todo el espacio a la izquierda y a la derecha, lanzando el contenido al centro)
    - justify-content: space-berween; (pone todo el espacio entre los elementos como vimos antes)
    - justify-content: space-around; (pone todo el espacio alrededor de los elementos) */
}

.headerPrincipal-nav {
    display: flex;
}

/* FOOTER: LISTA-PATROCINADORES/FORMULARIO */

.rodapePrincipal-patrocinadores .container { /*En esta parte vamos a organizar nuestro footer, más precisamente seccion patrocinadores y formulario. En mi clase padre aplico el 'display: flex;' para ubicar mis elementos uno al lado del otro, con 'justify-content: space-between;' genero un espacio entre los elementos, siempre y cuando la caja que los contenga me lo permita*/
    display: flex;
    justify-content: space-between;
}

.rodapePrincipal-patrocinadores-list { /*Se utilizo una 'ul' para listar los patrocinadores, por tal motivo, cada item aparecera uno debajo del otro, para cambiar esta situacion podemos aplicar al contedor padre la propiedad 'display: flex;' para que ubique un 'item' al lado del otro, luego para que estos queden alineados al centro puedo utilizar la propiedad 'align-items: center;', ahora bien, por defecto los items quedaran muy juntos unos a otros, si utilizamos la propiedad 'justify-content: space-between;' observaremos en un principio que no mejoro nuestra situacion como en el caso del header, es más sigue todo igual, esto se debe a que el navegador a traves de dicha propiedad distrubuye el espacio sobrante entre los distintos elementos y en el caso de las 'ul', no hay que distribuir, a no ser que le indiquemos al contenedor padre (al flex) que este ocupa cierto porcentaje de la pantalla (su capacidad), esto lo conseguiremos gracias a la propiedad 'width', si observamos como va quedando nuestra pagina, vamos a notar que nuestra lista de patrocinadores representa aproximadamente un 75% del ancho del contenedor en el que se encuentra, valiendonos de esa apreciacion podemos aplicar ese valor a nuesto 'width'. Ahora bien, al aplicar estos cambios vamos a notar que nuestra 'ul' ahora quedo encimada a nuestro 'form', una posible solucion es darle un menor porcentaje al ancho de dicho (70%) contenedor y agregarle un margin-right de 5%*/
    display: flex;
    align-items: center;
    /*justify-content: space-between;*/
    /*si comparamos el resultado obtenido hasta ahora con nuestra imagen guia, los item de nuestra 'ul' tienen un espacio mayor en los laterales con respecto a sus respectivos margenes, para conseguir esto, solo tenemos que cambiar la propiedad 'espacio-entre' por la propiedad 'espacio-alrededor'*/
    justify-content: space-around;
    width: 70%;
    margin-right: 5%;
}

.rodapePrincipal-contatoForm { /*para que nuestros elementos queden distribuidos de una mejor manera es necesario darle el 25% restante de la pantalla a nuestro 'form'*/
    width: 25%;
}

.rodapePrincipal-contatoForm-fieldset {
    /*Para terminar con nuestro footer solo nos resta reacomodar los elementos de nuestro 'form', si comparamos nuestros resultados con la imagen guia vamos a notar que nuestra caja de texto se escuentra separada del boton enviar, para corregir esto y que quede uno al lado del otro simplemente basta con aplicar la propiedad 'display: flex;' al contenedor del 'form'.*/
    display: flex;
}

/* MAPA DE CURSOS */

/*Como primera medida tenemos que identificar las clases padre a la que queremos aplicar las propiedades para que los items internos tomen esa caracteristica. Si analizamos nuestro codigo en la seccion 'mapa-de-cursos' vamos a encontrarnos con 'links' que nos llevan directamente a cada uno de los cursos en cuestion, estos estan divididos por categorias. En un principio vamos a encontrar un elemento debajo de otro y nosotros queremos ubicarlos segun su correspondiente categoria en columnas de cursos.*/

.rodapePrincipal-navMap-list {
    /*como primer medida necesitamos que los elementos se ubiquen uno al lado del otro en lugar de uno debajo del otro, como ya lo hicimos antes, esto se consigue con la propiedad 'display: flex;'.*/
    display: flex;
    /*al aplicar esta propiedad los elementos se colocaran como esperabamos solo que tambien van a desbordar nuestra pantalla, ahora nosotros necesitamos separar los elementos (cursos) por columnas, por padron a los elementos se le aplica la propiedad 'flex-direction: row;', la cual los ubica uno al lado del otro, para cambiar esto y ubicarlos en forma de columna (uno debajo del otro) aplicamos la propiedad 'flex-direction: column;'*/
    flex-direction: column; /*si colocamos esta propiedad en el elemento padre, conseguimos cambiar el flujo en el que flexbox renderiza los elementos. Asi que se quedan uno debajo del otro*/
    /*ya los tenemos ubicados en forma de columna uno debajos de otro, ahora el problema es que el mapa de cursos se hace gigantesco, haciendo una lista enorme y quedando muy abajo. Para solucionar esto tengo que reducir la lista de cursos y esto se consigue al darle una altura a dichas columanas para distribuir mejor el contenido (en este caso en particular para que se ubiquen segun categorias) esto se consigue aplicando la propiedad 'height: 250px;'*/
    height: 260px;
    /*al aplicarle una altura a nuestras columnas nos encontraremos con otro problema, el listado sigue abajo y nuestro color de fondo se queda pequeño, es decir, las columnas se desbordan de su area asignada en la pantalla, para arreglar esta situacion debemos decirle a flex que no desborde el contenido, de manera que cuando el contenido exceda el tamaño del padre (cuando llegue a una 'X' altura), simplemente se rompa a la siguiente columna, es decir, que se quiebre y vaya para la columana siguiente, consiguiendo asi posicionar una al lado de la otra, esto se consigue aplicando la propiedad; */
    flex-wrap: wrap;

}

/* SECCION DE CURSOS */

/*Nos solicitan que modifiquemos nuestra seccion de cursos, quieren que los mismos queden uno al lado del otro de forma que entren solo 4 cursos por fila. 
Para poder ponernos a trabajar sobre dicha solicitud es necesario identificar nuestra etiqueta principal (padre) a la cual aplicarle las propiedades necesarias para que sus componentes asuman esta caracteristica.*/

.contenidoPrincipal-cursos {
    /*ya identificamos nuestra clase principal, es una 'ul' que contine una lista de cursos:*/
    /*para conseguir los items de nuestra 'ul' queden uno al lado del otro aplicamos la propiedad;*/
    display: flex; /*dichos elementos al no tener un tamaño definido van a quedar superpuestos unos con otros.*/
    flex-wrap: wrap;

}

.contenidoPrincipal-cursos-link {
    /*para evitar que nuestros items se superpongan es necesario hacer lo mismo que con el contenedor principal, es decir, aplicar la propiedad; */
    display: flex; /*en un principio no vamos a obtener cambio alguno, esto se debe a que todavia siguen sin tener un tamaño definido, para ello necesitamos además aplicar la propiedad; */
    width: 23%; /*ahora conseguimos darle a cada item un tamaño definido, solo que como los mismos se encuentran en una misma linea, estos van a definir su tamaño con respecto al 100% de la pantalla para que entren todos!
    Para dejar solo cuatro items por linea es necesario aplicar en la etiqueta padre la propiedad que aprendimos en el pasado que me le indica al navegador que una vez que llegue al tamaño definido en cada item quiebre y pase a la siguiente columna.*/
}

/* EMPEZANDO CON GRID*/

/* Cuando ejecutemos la prueba del codigo correspondiente a la clase grid, recordar poner la altura, el acho y algún color para las divs.*/

.box {
    height: 50px;
    width: 50px;
    background-color: green;
  }

/*Para organizar este código HTML y hacer un grid (pensando sólo en el posicionamiento) podemos escribir el siguiente código CSS:*/

/*
  .grid {
    display: flex;
    flex-wrap: wrap;
  }
*/

/*De esta manera, todos los elementos hijos se mantendrían uno al lado del otro y cuando lleguen al límite de la página se romperían hacia la línea inferior, formando el grid.

Fíjate que aún no hemos fijado los márgenes, los elementos probablemente se quedarán pegados.*/

/* A tener en cuenta: 

Es complicado usarlas porque ponen comportamientos que no son adecuados para grids. Tanto space-between cuanto space-around harían que la última línea quedara muy fuera del patrón, en caso de que esa tuviera menos elementos que el resto de las líneas.

Es complicado usarlas porque ponen comportamientos que no son adecuados para grids. Tanto space-between cuanto space-around harían que la última línea quedara súper rara, en caso de que esa tuviera menos elementos de que el total de elementos por línea.*/

/* Para espaciar correctamente los elementos de un grid tenemos que hacer algunos cálculos con el viejo y buen margin y width.

Si tenemos 3 elementos por línea podemos hacer algo así: */

.grid {
    display: flex;
    flex-wrap: wrap;
  }
  .course {
    width: 31.3%;
    margin: 1%;
  }

  /*En este caso tendríamos 3 .course por línea, cada uno con width: 31.3% y margin: 1%.
  
  De width eso totaliza: 31.3 * 3 = 93.9%.
  
  De margin eso totaliza: 6% (1% a la izquierda y 1% a la derecha de cada elemento).
  
  En el total tenemos: 93.9% + 6% = 99.9% que se puede redondear al 100% */


  /*Para que nuestro sitio sea responsive es necesario indicarle a nuestro navegador a partir de que tamaño de pantalla queremos que aplique los cambios que vamos a realizar a continuacion;*/

@media (max-width: 768px) {
    /*Colocamos aquí @media (max-width), es decir, este código que está aquí a partir de este media query solo va a ser aplicado hasta un máximo de 768 pixeles.  */

  /* RESPONSIVE */

  /*Para trabajar la parte mobile es necesario recurrir a la herramienta de desarrollador (haciendo click derecho-inspeccionar) y adaptando la pantalla a un tamaño de smartphone o tablet segun corresponda, es decir, a un modo responsivo. Al hacer esto vamos a notar que varios elementos que sobresalen de la pantalla y hacen que todo se distorsione. */

  /*Vamos a comenzar por adaptar el header de nuestro sitio, vamos a dejar el logo de nuestra pagina y despues queremos que el menu se organice en forma de columnas, esto ya lo hicimos antes, asi que vamos aplicar la misma propiedad; */

  .headerPrincipal .container {
    flex-direction: column; /*recordar que flex coloca los elementos uno al lado del otro por padron, nosotros necesitamos cambiar esa opcion a columnas. Como lo aplicamos en principio sobre el elemento padre, en principio tendriamos una columna con dos filas.*/
    align-items: initial; /*quito la alineacion vertical y lo dejo de lado a lado.*/

    /*ahora solo nos falta alinear los textos al centro, esto lo conseguimos utilizando la propiedad; */
    text-align: center; 
  }

  .headerPrincipal-nav {
    /*para conseguir que nuestro menu responde de la misma manera (en forma de columna) aplicamos al elemento padre de los items, es decir, al 'ul' la misma propiedad; */
    flex-direction: column;
    /*ahora solo nos queda acomodar los items de nuestro menu, en nuestra version desktop los alineamos al centro, es decir, los alineamos con respecto al eje de coordenadas 'x' con la propiedad 'align-items: center;', dicha propiedad alinea al centro distribuyendo el mismo espacio arriba y abajo. Cuando cambiamos la propiedad flex a colum, este los alinea con respecto al eje 'y', por lo cual, en lugar de distribuir el mismo espacio arriba y abajo, lo hara a los costados, lo cual no esta mal, solo que para aprovechar el ancho de la pantalla mobile, vamos a dejar que los item tengan el tamaño completo de la pantalla, por lo que vamos a volver los elementos a su estado padron, recordar que esto se debe hacer en el elemento padre.*/
  }

  /*Teniendo en cuenta que el formato de pantalla va ser mas pequeño, si dejamos nuestro listado de cursos con el mismo formato que en desktop estos podrian no apreciarse del todo bien, por lo que vamos a cambiarlos para cada item ocupe el 100% de la pantalla, esto lo conseguimos aplicando el padron linea sobre el elemento padre a traves de la propiedad; */

  .contenidoPrincipal-cursos {
    flex-direction: column; /*con esto conseguimos que ahora nuestros items se acomoden uno debajo del otro, en columnas.*/
  }

  /*para que cada uno de nuestros items ocupe el total de la pantalla, tenemos que cambiar su 'width' a 100% en lugar de como lo habiamos iniciado en un principio. */
  .contenidoPrincipal-cursos-link {
    width: 100%;
  }

  /*ahora solo nos queda adaptar nuestro mapa de cursos, en el cual tenemos un 'nav' con los accesos a cada uno de ellos, en un principio a estos los acomodamos en forma de columnas, generando un quiebre a una altura determinada. Para poder adaptarlo es necesario volver a modificar dicha propiedad a una altura automatica.*/

  .rodapePrincipal-navMap-list {
    height: auto;
    /*como le asignamo una altura automatica ya no necesitamos que se aplique la propiedad de quiebre para que al llegar a la altura idicada pase a la siguiente columna.*/
    flex-wrap: nowrap;
  }

  /*Para ajustar nuestro footer, hacemos exactamente lo mismo, */

  .rodapePrincipal-patrocinadores .container {
    flex-direction: column;
  }

  .rodapePrincipal-contatoForm {
    width: 100%;
  }

  .rodapePrincipal-patrocinadores-list {
    align-items: center;
    width: 100%;
    margin: 0;
  }

  .rodapePrincipal-contatoForm-legend {
    margin-left: auto;
  }

  .rodapePrincipal-contatoForm-fieldset{
    justify-content: center;
  }

}